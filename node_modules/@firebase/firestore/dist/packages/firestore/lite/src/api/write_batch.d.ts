/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Mutation } from '../../../src/model/mutation';
import { DocumentReference, SetOptions, UpdateData } from './reference';
import { FirebaseFirestore } from './database';
import { FieldPath } from './field_path';
export declare class WriteBatch {
    private readonly _firestore;
    private readonly _commitHandler;
    private readonly _dataReader;
    private _mutations;
    private _committed;
    constructor(_firestore: FirebaseFirestore, _commitHandler: (m: Mutation[]) => Promise<void>);
    set<T>(documentRef: DocumentReference<T>, value: T): WriteBatch;
    set<T>(documentRef: DocumentReference<T>, value: Partial<T>, options: SetOptions): WriteBatch;
    update(documentRef: DocumentReference<unknown>, value: UpdateData): WriteBatch;
    update(documentRef: DocumentReference<unknown>, field: string | FieldPath, value: unknown, ...moreFieldsAndValues: unknown[]): WriteBatch;
    delete(documentRef: DocumentReference<unknown>): WriteBatch;
    commit(): Promise<void>;
    private verifyNotCommitted;
}
export declare function validateReference<T>(documentRef: DocumentReference<T>, firestore: FirebaseFirestore): DocumentReference<T>;
export declare function writeBatch(firestore: FirebaseFirestore): WriteBatch;
