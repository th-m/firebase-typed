/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FieldValue as PublicFieldValue } from '@firebase/firestore-types';
import { FieldTransform } from '../model/mutation';
import { ParseContext } from './user_data_reader';
/**
 * An opaque base class for FieldValue sentinel objects in our public API that
 * is shared between the full, lite and legacy SDK.
 */
export declare abstract class _SerializableFieldValue {
    /** The public API endpoint that returns this class. */
    abstract readonly _methodName: string;
    /** A pointer to the implementing class. */
    readonly _delegate: _SerializableFieldValue;
    abstract _toFieldTransform(context: ParseContext): FieldTransform | null;
    abstract isEqual(other: _SerializableFieldValue): boolean;
}
export declare class DeleteFieldValueImpl extends _SerializableFieldValue {
    readonly _methodName: string;
    constructor(_methodName: string);
    _toFieldTransform(context: ParseContext): null;
    isEqual(other: FieldValue): boolean;
}
export declare class ServerTimestampFieldValueImpl extends _SerializableFieldValue {
    readonly _methodName: string;
    constructor(_methodName: string);
    _toFieldTransform(context: ParseContext): FieldTransform;
    isEqual(other: FieldValue): boolean;
}
export declare class ArrayUnionFieldValueImpl extends _SerializableFieldValue {
    readonly _methodName: string;
    private readonly _elements;
    constructor(_methodName: string, _elements: unknown[]);
    _toFieldTransform(context: ParseContext): FieldTransform;
    isEqual(other: FieldValue): boolean;
}
export declare class ArrayRemoveFieldValueImpl extends _SerializableFieldValue {
    readonly _methodName: string;
    readonly _elements: unknown[];
    constructor(_methodName: string, _elements: unknown[]);
    _toFieldTransform(context: ParseContext): FieldTransform;
    isEqual(other: FieldValue): boolean;
}
export declare class NumericIncrementFieldValueImpl extends _SerializableFieldValue {
    readonly _methodName: string;
    private readonly _operand;
    constructor(_methodName: string, _operand: number);
    _toFieldTransform(context: ParseContext): FieldTransform;
    isEqual(other: FieldValue): boolean;
}
/** The public FieldValue class of the lite API. */
export declare abstract class FieldValue extends _SerializableFieldValue implements PublicFieldValue {
    protected constructor();
    static delete(): PublicFieldValue;
    static serverTimestamp(): PublicFieldValue;
    static arrayUnion(...elements: unknown[]): PublicFieldValue;
    static arrayRemove(...elements: unknown[]): PublicFieldValue;
    static increment(n: number): PublicFieldValue;
}
