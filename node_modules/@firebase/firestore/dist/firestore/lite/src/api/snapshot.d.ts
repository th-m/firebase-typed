/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FirebaseFirestore } from './database';
import { DocumentData, DocumentReference, Query, SetOptions } from './reference';
import { FieldPath } from './field_path';
import { DocumentKey } from '../../../src/model/document_key';
import { Document } from '../../../src/model/document';
import { FieldPath as InternalFieldPath } from '../../../src/model/path';
import { UntypedFirestoreDataConverter } from '../../../src/api/user_data_reader';
export interface FirestoreDataConverter<T> {
    toFirestore(modelObject: T): DocumentData;
    toFirestore(modelObject: Partial<T>, options: SetOptions): DocumentData;
    fromFirestore(snapshot: QueryDocumentSnapshot<DocumentData>): T;
}
export declare class DocumentSnapshot<T = DocumentData> {
    _firestore: FirebaseFirestore;
    _key: DocumentKey;
    _document: Document | null;
    _converter: UntypedFirestoreDataConverter<T> | null;
    constructor(_firestore: FirebaseFirestore, _key: DocumentKey, _document: Document | null, _converter: UntypedFirestoreDataConverter<T> | null);
    get id(): string;
    get ref(): DocumentReference<T>;
    exists(): this is QueryDocumentSnapshot<T>;
    data(): T | undefined;
    get(fieldPath: string | FieldPath): any;
}
export declare class QueryDocumentSnapshot<T = DocumentData> extends DocumentSnapshot<T> {
    data(): T;
}
export declare class QuerySnapshot<T = DocumentData> {
    readonly query: Query<T>;
    readonly _docs: Array<QueryDocumentSnapshot<T>>;
    constructor(query: Query<T>, _docs: Array<QueryDocumentSnapshot<T>>);
    get docs(): Array<QueryDocumentSnapshot<T>>;
    get size(): number;
    get empty(): boolean;
    forEach(callback: (result: QueryDocumentSnapshot<T>) => void, thisArg?: unknown): void;
}
export declare function snapshotEqual<T>(left: DocumentSnapshot<T> | QuerySnapshot<T>, right: DocumentSnapshot<T> | QuerySnapshot<T>): boolean;
/**
 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
 */
export declare function fieldPathFromArgument(methodName: string, arg: string | FieldPath): InternalFieldPath;
