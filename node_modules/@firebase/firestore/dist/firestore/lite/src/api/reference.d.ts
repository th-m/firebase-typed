/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FirebaseFirestore } from './database';
import { _DocumentKeyReference, UserDataReader } from '../../../src/api/user_data_reader';
import { Query as InternalQuery } from '../../../src/core/query';
import { ResourcePath } from '../../../src/model/path';
import { DocumentSnapshot, FirestoreDataConverter, QuerySnapshot } from './snapshot';
import { FieldPath } from './field_path';
export interface DocumentData {
    [field: string]: any;
}
export interface UpdateData {
    [fieldPath: string]: any;
}
export declare type SetOptions = {
    readonly merge?: boolean;
} | {
    readonly mergeFields?: Array<string | FieldPath>;
};
/**
 * A reference to a particular document in a collection in the database.
 */
export declare class DocumentReference<T = DocumentData> extends _DocumentKeyReference<T> {
    readonly firestore: FirebaseFirestore;
    readonly _path: ResourcePath;
    readonly type = "document";
    constructor(firestore: FirebaseFirestore, _converter: FirestoreDataConverter<T> | null, _path: ResourcePath);
    get id(): string;
    get path(): string;
    get parent(): CollectionReference<T>;
    collection(path: string): CollectionReference<DocumentData>;
    withConverter<U>(converter: FirestoreDataConverter<U>): DocumentReference<U>;
}
export declare class Query<T = DocumentData> {
    readonly firestore: FirebaseFirestore;
    readonly _converter: FirestoreDataConverter<T> | null;
    readonly _query: InternalQuery;
    readonly type: 'query' | 'collection';
    constructor(firestore: FirebaseFirestore, _converter: FirestoreDataConverter<T> | null, _query: InternalQuery);
    withConverter<U>(converter: FirestoreDataConverter<U>): Query<U>;
}
export declare type QueryConstraintType = 'where' | 'orderBy' | 'limit' | 'limitToLast' | 'startAt' | 'startAfter' | 'endAt' | 'endBefore';
export declare abstract class QueryConstraint {
    abstract readonly type: QueryConstraintType;
    /**
     * Takes the provided Query and returns a copy of the Query with this
     * QueryConstraint applied.
     */
    abstract _apply<T>(query: Query<T>): Query<T>;
}
export declare function query<T>(query: Query<T>, ...queryConstraints: QueryConstraint[]): Query<T>;
export declare type WhereFilterOp = '<' | '<=' | '==' | '!=' | '>=' | '>' | 'array-contains' | 'in' | 'array-contains-any' | 'not-in';
export declare function where(fieldPath: string | FieldPath, opStr: WhereFilterOp, value: unknown): QueryConstraint;
export declare type OrderByDirection = 'desc' | 'asc';
export declare function orderBy(field: string | FieldPath, directionStr?: OrderByDirection): QueryConstraint;
export declare function limit(n: number): QueryConstraint;
export declare function limitToLast(n: number): QueryConstraint;
export declare function startAt(...docOrFields: Array<unknown | DocumentSnapshot<unknown>>): QueryConstraint;
export declare function startAfter(...docOrFields: Array<unknown | DocumentSnapshot<unknown>>): QueryConstraint;
export declare function endBefore(...docOrFields: Array<unknown | DocumentSnapshot<unknown>>): QueryConstraint;
export declare function endAt(...docOrFields: Array<unknown | DocumentSnapshot<unknown>>): QueryConstraint;
export declare class CollectionReference<T = DocumentData> extends Query<T> {
    readonly firestore: FirebaseFirestore;
    readonly _path: ResourcePath;
    readonly type = "collection";
    constructor(firestore: FirebaseFirestore, converter: FirestoreDataConverter<T> | null, _path: ResourcePath);
    get id(): string;
    get path(): string;
    get parent(): DocumentReference<DocumentData> | null;
    doc(path?: string): DocumentReference<T>;
    withConverter<U>(converter: FirestoreDataConverter<U>): CollectionReference<U>;
}
export declare function collection(firestore: FirebaseFirestore, collectionPath: string): CollectionReference<DocumentData>;
export declare function collection(reference: CollectionReference<unknown>, collectionPath: string): CollectionReference<DocumentData>;
export declare function collection(reference: DocumentReference, collectionPath: string): CollectionReference<DocumentData>;
export declare function collectionGroup(firestore: FirebaseFirestore, collectionId: string): Query<DocumentData>;
export declare function doc(firestore: FirebaseFirestore, documentPath: string): DocumentReference<DocumentData>;
export declare function doc<T>(reference: CollectionReference<T>, documentPath?: string): DocumentReference<T>;
export declare function doc(reference: DocumentReference<unknown>, documentPath: string): DocumentReference<DocumentData>;
export declare function getDoc<T>(reference: DocumentReference<T>): Promise<DocumentSnapshot<T>>;
export declare function getDocs<T>(query: Query<T>): Promise<QuerySnapshot<T>>;
export declare function setDoc<T>(reference: DocumentReference<T>, data: T): Promise<void>;
export declare function setDoc<T>(reference: DocumentReference<T>, data: Partial<T>, options: SetOptions): Promise<void>;
export declare function updateDoc(reference: DocumentReference<unknown>, data: UpdateData): Promise<void>;
export declare function updateDoc(reference: DocumentReference<unknown>, field: string | FieldPath, value: unknown, ...moreFieldsAndValues: unknown[]): Promise<void>;
export declare function deleteDoc(reference: DocumentReference): Promise<void>;
export declare function addDoc<T>(reference: CollectionReference<T>, data: T): Promise<DocumentReference<T>>;
export declare function refEqual<T>(left: DocumentReference<T> | CollectionReference<T>, right: DocumentReference<T> | CollectionReference<T>): boolean;
export declare function queryEqual<T>(left: Query<T>, right: Query<T>): boolean;
export declare function newUserDataReader(firestore: FirebaseFirestore): UserDataReader;
