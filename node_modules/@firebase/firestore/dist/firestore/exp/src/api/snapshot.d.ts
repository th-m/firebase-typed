/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DocumentKey } from '../../../src/model/document_key';
import { Document } from '../../../src/model/document';
import { DocumentSnapshot as LiteDocumentSnapshot } from '../../../lite/src/api/snapshot';
import { FirebaseFirestore } from './database';
import { DocumentData, Query, SetOptions } from '../../../lite/src/api/reference';
import { SnapshotMetadata } from '../../../src/api/database';
import { ViewSnapshot } from '../../../src/core/view_snapshot';
import { FieldPath } from '../../../lite/src/api/field_path';
import { SnapshotListenOptions } from './reference';
export interface FirestoreDataConverter<T> {
    toFirestore(modelObject: T): DocumentData;
    toFirestore(modelObject: Partial<T>, options: SetOptions): DocumentData;
    fromFirestore(snapshot: QueryDocumentSnapshot<DocumentData>, options?: SnapshotOptions): T;
}
export interface SnapshotOptions {
    readonly serverTimestamps?: 'estimate' | 'previous' | 'none';
}
export declare type DocumentChangeType = 'added' | 'removed' | 'modified';
export interface DocumentChange<T = DocumentData> {
    readonly type: DocumentChangeType;
    readonly doc: QueryDocumentSnapshot<T>;
    readonly oldIndex: number;
    readonly newIndex: number;
}
export declare class DocumentSnapshot<T = DocumentData> extends LiteDocumentSnapshot<T> {
    readonly _firestore: FirebaseFirestore;
    readonly metadata: SnapshotMetadata;
    private readonly _firestoreImpl;
    constructor(_firestore: FirebaseFirestore, key: DocumentKey, document: Document | null, metadata: SnapshotMetadata, converter: FirestoreDataConverter<T> | null);
    exists(): this is QueryDocumentSnapshot<T>;
    data(options?: SnapshotOptions): T | undefined;
    get(fieldPath: string | FieldPath, options?: SnapshotOptions): any;
}
export declare class QueryDocumentSnapshot<T = DocumentData> extends DocumentSnapshot<T> {
    data(options?: SnapshotOptions): T;
}
export declare class QuerySnapshot<T = DocumentData> {
    readonly _firestore: FirebaseFirestore;
    readonly query: Query<T>;
    readonly _snapshot: ViewSnapshot;
    readonly metadata: SnapshotMetadata;
    private _cachedChanges?;
    private _cachedChangesIncludeMetadataChanges?;
    constructor(_firestore: FirebaseFirestore, query: Query<T>, _snapshot: ViewSnapshot);
    get docs(): Array<QueryDocumentSnapshot<T>>;
    get size(): number;
    get empty(): boolean;
    forEach(callback: (result: QueryDocumentSnapshot<T>) => void, thisArg?: unknown): void;
    docChanges(options?: SnapshotListenOptions): Array<DocumentChange<T>>;
    private _convertToDocumentSnapshot;
}
export declare function snapshotEqual<T>(left: DocumentSnapshot<T> | QuerySnapshot<T>, right: DocumentSnapshot<T> | QuerySnapshot<T>): boolean;
